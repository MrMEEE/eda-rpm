#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

get_path () {

SCRIPT_PATH="$(dirname -- "${BASH_SOURCE[0]}")"            # relative
SCRIPT_PATH="$(cd -- "$MY_PATH" && pwd)"    # absolutized and normalized
if [[ -z "$SCRIPT_PATH" ]] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  exit 1  # fail
fi

ROOT_PATH=$(echo $SCRIPT_PATH | rev | cut -f2- -d/ | rev)

echo "$ROOT_PATH"

}

# Initialize

if [[ $PROJECTPATH == "" ]];then
	PROJECTPATH=$(get_path)
fi

if [ ! -f $PROJECTPATH/config ];then
	echo "Configuration file: $PROJECTPATH/config is not present"
	exit 1
else
	source $PROJECTPATH/config
	if [[ "$PROJECTNAME" == "" ]];then
		echo "Project name is not defined in $PROJECTPATH/config"
		exit 2
	fi
fi

if [ -d $PROJECTPATH/virtualenv ]; then
	source $PROJECTPATH/virtualenv/bin/activate
fi

get_version () {

	cd $PROJECTPATH/versions/
	git rev-parse --abbrev-ref HEAD

}

get_python () {

	if [ -f $PROJECTPATH/versions/PYTHON ]; then
		cat $PROJECTPATH/versions/PYTHON
	else
		echo 3
	fi

}

get_packagename () {

	PYTHONVERSION=$(get_python)
	echo $(echo $1 | sed -e 's/\([^.]*\)-.*/\1/' | sed "s/python$PYTHONVERSION-//g")

}


build_rpm () {
	VERSION=$(get_version)

	mkdir -p $PROJECTPATH/versions/logs/
	
	echo "Building Package $1, saving output to $PROJECTPATH/versions/logs/$1.log"
	# Legacy repo for AWX-RPM < 24.1.0: --addrepo=https://download.copr.fedorainfracloud.org/results/@copr/PyPI/epel-9-x86_64
	unbuffer mock -r epel-9-x86_64 --enable-network --addrepo $PROJECTPATH/rpmbuilds/$VERSION/RPMS/ --resultdir $PROJECTPATH/rpmbuilds/$VERSION/RPMS-TMP/ --no-clean $PROJECTPATH/rpmbuilds/$VERSION/SRPMS/$1 --rpmbuild-opts="--nocheck" --no-cleanup-after &> $PROJECTPATH/versions/logs/$1.log
	if ls $PROJECTPATH/rpmbuilds/$VERSION/RPMS-TMP/*.rpm 1> /dev/null 2>&1; then
		echo -e "${GREEN}Build succeeded.${NC}"
		rm -f $PROJECTPATH/rpmbuilds/$VERSION/RPMS-TMP/*.src.rpm
		cp $PROJECTPATH/rpmbuilds/$VERSION/RPMS-TMP/*.rpm $PROJECTPATH/rpmbuilds/$VERSION/RPMS/
		NEWPACKAGES=$((NEWPACKAGES+1))
		BUILDSTATUS=1
	else
		echo -e "${RED}Build failed, check logs to correct.${NC}"
		BUILDSTATUS=0
	fi

	createrepo_c $PROJECTPATH/rpmbuilds/$VERSION/RPMS/ >> $PROJECTPATH/versions/logs/$1.log 2>&1
	rm -f $PROJECTPATH/rpmbuilds/$VERSION/RPMS-TMP/* >> $PROJECTPATH/versions/logs/$1.log 2>&1
	mock -r epel-9-x86_64 --clean >> $PROJECTPATH/versions/logs/$1.log 2>&1
	$PROJECTPATH/scripts/changeversion save $BUILDSTATUS $1 
}

